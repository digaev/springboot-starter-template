const { writeFileSync } = require('fs');
const { join } = require('path');
const rimraf = require('rimraf');

const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');
const UglifyJsPlugin = require('uglifyjs-webpack-plugin');

const DEV_MODE = process.env.NODE_ENV === 'development';

const ASSETS_DIR = join(__dirname, 'src', 'main', 'resources', 'public', 'assets');
const WEBINF_DIR = join(__dirname, 'src', 'main', 'webapp', 'WEB-INF');

// Use empty string '' instead of '/' for root url
const PUBLIC_URL = '/assets';

class WriteHashPlugin {
  // eslint-disable-next-line class-methods-use-this
  apply(compiler) {
    const views = join(WEBINF_DIR, 'views');

    compiler.hooks.beforeCompile.tap('WriteHashPlugin', () => {
      rimraf.sync(ASSETS_DIR);
    });

    compiler.hooks.done.tap('WriteHashPlugin', (stats) => {
      const app = `${PUBLIC_URL}/app${DEV_MODE ? '' : `-${stats.hash}`}`;

      writeFileSync(
        join(views, '_script.jsp'),
        `<%-- This file was generated by WriteHashPlugin on ${new Date()} --%>\n\n`
        + `<script type="text/javascript" src="${app}.js"></script>\n`,
        'utf8',
      );

      writeFileSync(
        join(views, '_style.jsp'),
        `<%-- This file was generated by WriteHashPlugin on ${new Date()} --%>\n\n`
        + `<link rel="stylesheet" href="${app}.css">\n`,
        'utf8',
      );
    });
  }
}

module.exports = {
  mode: DEV_MODE ? 'development' : 'production',
  context: join(WEBINF_DIR, 'assets'),
  entry: {
    app: ['./js/app.js', './css/app.styl'],
  },
  output: {
    filename: DEV_MODE ? '[name].js' : '[name]-[hash].js',
    path: join(ASSETS_DIR),
    publicPath: `${PUBLIC_URL}/`,
  },
  devtool: DEV_MODE ? 'source-map' : undefined,
  module: {
    rules: [{
      test: /.js$/,
      use: [{
        loader: 'babel-loader',
        options: {
          presets: ['@babel/preset-env'],
        },
      }],
    }, {
      test: /.css$/,
      use: [
        MiniCssExtractPlugin.loader,
        'css-loader',
      ],
    }, {
      test: /.styl$/,
      use: [
        MiniCssExtractPlugin.loader,
        'css-loader',
        'stylus-loader',
      ],
    }, {
      test: /\.(png|jpg|svg|ttf|eot|woff|woff2)$/,
      use: [{
        loader: 'file-loader',
        options: {
          name: '[name].[ext]',
        },
      }],
    }],
  },
  plugins: [
    new WriteHashPlugin(),
    new MiniCssExtractPlugin({
      filename: DEV_MODE ? '[name].css' : '[name]-[hash].css',
    }),
  ],
  optimization: {
    minimizer: [new UglifyJsPlugin(), new OptimizeCSSAssetsPlugin()],
  },
};
